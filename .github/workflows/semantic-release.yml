# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

name: "Semantic Release"

on:
  push:
    branches:
      - ([0-9])?(.{+([0-9]),x}).x
      - main
      - next
      - next-major
      - alpha
      - beta

jobs:
  Test:
    name: "PHP ${{ matrix.php-versions }} Test on ubuntu-latest OS with ${{ matrix.dependencies }} dependencies"

    if: ${{ env.GITHUB_REPOSITORY }} != 'narrowspark/php-library-template'

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: [ "8.0" ]
        dependencies: [ "locked" ]
        compiler: [ "default" ]

    env:
      key: "continuous-integration-linux-v1" # change key (version) to clear cache
      extensions: "mbstring"
      ini-values: "date.timezone=Europe/Berlin, assert.exception=1, zend.assertions=1, opcache.enable=1, opcache.enable_cli=0, opcache.optimization_level=-1, opcache.jit=1255, opcache.jit_buffer_size=32M, serialize_precision=14"
      tools: "composer"

    steps:
      - name: "Git checkout"
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
        env:
          GIT_COMMITTER_NAME: "GitHub Actions Shell"
          GIT_AUTHOR_NAME: "GitHub Actions Shell"
          EMAIL: "github-actions[bot]@users.noreply.github.com"

      - name: "Setup cache environment"
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          key: ${{ env.key }}

      - name: "Cache extensions"
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-env.outputs.dir }}
          key: ${{ steps.cache-env.outputs.key }}
          restore-keys: ${{ steps.cache-env.outputs.key }}

      - name: "Setup PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: ${{ env.extensions }}
          ini-values: ${{ env.ini-values }}
          tools: ${{ env.tools }}
          coverage: "pcov"

      - name: "Setup Problem Matchers for PHP"
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: "Check PHP Version"
        run: php -v

      - name: "List all php extensions with versions"
        run: php -r 'foreach (get_loaded_extensions() as $extension) echo $extension . " " . phpversion($extension) . PHP_EOL;'

      - name: "Configure Container"
        env:
          GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
          GIT_USER_USERNAME: ${{ secrets.GIT_USER_USERNAME }}
        run: |
          EMAIL=${GIT_USER_EMAIL:-"github-actions[bot]@users.noreply.github.com"}
          NAME=${GIT_USER_USERNAME:-"github-actions-shell"}

          git config --global user.email "${EMAIL}"
          git config --global user.name "${NAME}"

      - name: "Check Composer Version"
        run: composer -V

      - name: "Validate composer.json and composer.json"
        run: composer validate --strict

      - name: "Get Composer Cache Directory"
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: actions/cache@v2
        with:
          path: "${{ steps.composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.json') }}"
          restore-keys: "${{ runner.os }}-php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install locked dependencies"
        if: matrix.dependencies == 'locked'
        run: composer install --no-progress --no-interaction --ansi

      - name: "Install highest dependencies"
        if: matrix.dependencies == 'highest'
        run: composer update --no-progress --no-interaction --ansi

      - name: "Install lowest dependencies"
        if: matrix.dependencies == 'lowest'
        run: composer update --no-progress --no-interaction --ansi --prefer-lowest --prefer-stable

      - name: "Setup Problem Matchers for PHPUnit"
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: "Run Test's"
        run: ./vendor/bin/phpunit --verbose

  semantic-release:
    name: "Semantic Release"

    if: ${{ env.GITHUB_REPOSITORY }} != 'narrowspark/php-library-template'

    runs-on: ubuntu-latest

    needs: ["Test"]

    steps:
      - uses: actions/checkout@v2

      - name: "Semantic Release"
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 17.0.7
          extra_plugins: |
            @semantic-release/changelog@^5.0.1
            @semantic-release/git@^9.0.0
            @google/semantic-release-replace-plugin@^1.0.0
            conventional-changelog-conventionalcommits@^4.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
